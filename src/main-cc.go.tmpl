{{/*
        Counting command. Count and have fun!
        
	See <https://yagpdb-cc.github.io/fun/counting-v2/overview>
	
        Author: H1nr1 <https://github.com/H1nr1>
*/}}

{{/* Configurable Values */}}
{{ $CountTwice := false }} {{/* Allow users to count multiple times in a row; true/false */}}
{{ $RoleID := false }} {{/* Counting role ID; set to false to disable */}}
{{ $SecondChance := true }} {{/* Second chance if wrong; true/false */}}
{{ $StatsCC := true }} {{/* If you added the Stats CC; true/false */}}
{{ $Reactions := true }} {{/* Allow confirmative reactions on message; true false */}}
	{{ $ReactionDelete := true }} {{/* Toggle for reactions to delete from last message; true/false */}}
	{{ $CorrectEmoji := "‚úÖ" }} {{/* Emoji to react with if number is correct; if custom, use format name:id */}}
	{{ $WarningEmoji := "‚ö†Ô∏è" }} {{/* Emoji to react with if wrong number AND Second Chance is true/on; if custom, use format name:id */}}
	{{ $IncorrectEmoji := "‚ùå" }} {{/* Emoji to react with if number is incorrect; if custom, use format name:id */}}
{{/* End of configurable values */}}

{{/* No Touchy */}}
{{ $db := or (dbGet 0 "Counting").Value (sdict "Last" (sdict "User" 0 "Msg" 0) "Next" 1 "HighScore" (sdict "User" 0 "Num" 0) "SecondChance" 0) }}
{{ $UStats := or (dbGet .User.ID "Counting").Value (sdict "Correct" 0 "Total" 0) }}

{{ with .ExecData }}
	{{ if not (getMessage nil .) }} {{/* Check if number was deleted */}}
		{{ sendMessage nil (cembed "description" (print (userArg $db.Last.User).Mention " deleted their number which was correct!\nThe next number is " $db.Next) "color" 30654) }}
	{{ return }}{{ end }}
{{ return }}{{ end }}

{{ $Number = toInt (round (slice ($Number := (exec "calc" (index .Args 0))) 9 (sub (len $Number) 1))) }}

{{ if or (ne $db.Last.User .User.ID) $CountTwice }} {{/* Checks user */}}
	{{ if eq $db.Next $Number }} {{/* Checks if correct number */}}
		{{ $db.Set "Next" (add $db.Next 1) }}
		{{ if $Reactions }}
			{{ addReactions $CorrectEmoji }}
			{{ if and $ReactionDelete (ne $db.Last.Msg 0) }}
				{{ deleteMessageReaction nil $db.Last.Msg 204255221017214977 $CorrectEmoji }}
			{{ end }}
		{{ end }}
		{{ $db.Set "Last" (sdict "User" .User.ID "Msg" .Message.ID) }}
		{{ if $RoleID }} {{/* Counting role */}}
			{{ takeRoleID $db.Last.User $RoleID }}{{ giveRoleID .User.ID $RoleID }}
		{{ end }}
		{{ if $StatsCC }} {{/* Update leaderboard values */}}
			{{ $UStats.Set "Correct" (add $UStats.Correct 1) }}{{ $UStats.Set "Total" (add $UStats.Total 1) }}{{ dbSet .User.ID "Counting" $UStats }}
			{{ if gt $Number $db.HighScore.Num }}{{ $db.Set "HighScore" (sdict "User" .User.ID "Num" $Number) }}{{ end }}
		{{ end }}
		{{ dbSet 0 "Counting" $db }}
		{{ execCC .CCID nil 10 .Message.ID }} {{/* Call to check if message was deleted */}}
		
	{{ else }} {{/* Wrong number */}}
		{{ $db.Set "SecondChance" (add $db.SecondChance 1) }}
		{{ if and $SecondChance (lt $db.SecondChance 2) }} {{/* Second Chance */}}
			{{ if $Reactions }}{{ addReactions $WarningEmoji }}{{ end }}
			{{ $db.Set "Last" (sdict "User" .User.ID "Msg" .Message.ID) }}{{ dbSet 0 "Counting" $db }}
			{{ sendMessage nil (cembed "description" (print .User.Mention " sent an incorrect number of " $Number "\n**But**, second chance saved the count!\nThe next number is " $db.Next) "color" 16744192) }}

		{{ else }} {{/* Reset count */}}
			{{ if $StatsCC }}{{ $UStats.Set "Total" (add $UStats.Total 1) }}{{ dbSet .User.ID "Counting" $UStats }}{{ end }}{{ dbDel 0 "Counting" }}
			{{ sendMessage nil (cembed "description" (print .User.Mention " sent an incorrect number of " $Number "\nCorrect number was " $db.Next "\nStart over at 1 üôÉ") "color" 16711680) }}
			{{ if $Reactions }}{{ addReactions $IncorrectEmoji }}{{ end }}
		{{ end }}
	{{ end }}

{{ else }} {{/* Same user */}}
	{{ sendMessage nil (cembed "description" (print "You can't count twice in a row ü•≤\nThe next number is " $db.Next) "color" 16744192) }}
{{ end }}
